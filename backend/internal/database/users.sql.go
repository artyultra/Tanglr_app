// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const changeAvatarForuser = `-- name: ChangeAvatarForuser :exec
UPDATE users SET avatar_url = $1 WHERE id = $2
`

type ChangeAvatarForuserParams struct {
	AvatarUrl string
	ID        uuid.UUID
}

func (q *Queries) ChangeAvatarForuser(ctx context.Context, arg ChangeAvatarForuserParams) error {
	_, err := q.db.ExecContext(ctx, changeAvatarForuser, arg.AvatarUrl, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, hashed_password, created_at, updated_at, avatar_url)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6)
RETURNING id, username, email, hashed_password, created_at, updated_at, avatar_url
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	AvatarUrl      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarUrl,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getNonFriendUsers = `-- name: GetNonFriendUsers :many
SELECT id, username, email, hashed_password, created_at, updated_at, avatar_url FROM users u 
WHERE u.id != $1 
AND NOT EXISTS (
    SELECT 1 FROM friends f 
    WHERE (f.user_id = $1 AND f.friend_id = u.id)
    OR (f.friend_id = $1 AND f.user_id = u.id)
)
`

func (q *Queries) GetNonFriendUsers(ctx context.Context, id uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getNonFriendUsers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.HashedPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, hashed_password, created_at, updated_at, avatar_url FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, hashed_password, created_at, updated_at, avatar_url FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarUrl,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, hashed_password, created_at, updated_at, avatar_url FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarUrl,
	)
	return i, err
}

const resetUsersTable = `-- name: ResetUsersTable :exec
delete from users
`

func (q *Queries) ResetUsersTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsersTable)
	return err
}
