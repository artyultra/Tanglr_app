// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, hashed_password, created_at, updated_at)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5)
RETURNING id, username, email, hashed_password, created_at, updated_at
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, hashed_password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT 
    u.id as user_id,
    u.username,
    u.email,
    u.hashed_password,
    u.created_at as user_created_at,
    u.updated_at as user_updated_at,
    up.id as preferences_id,
    up.avatar_url,
    up.cover_url,
    up.dark_mode,
    up.private_mode,
    up.created_at as preferences_created_at,
    up.updated_at as preferences_updated_at,
    (
      SELECT COUNT(*)
      FROM follows f
      WHERE f.initiator_id = u.id
      and f.status = 'accepted'
    ) as following_count,
    (
      SELECT COUNT(*)
      FROM follows f
      WHERE f.target_id = u.id
      and f.status = 'accepted'
    ) as follower_count
FROM 
    users u
LEFT JOIN
    user_preferences up ON up.user_id = u.id
WHERE u.id = $1
`

type GetUserByIdRow struct {
	UserID               uuid.UUID
	Username             string
	Email                string
	HashedPassword       string
	UserCreatedAt        time.Time
	UserUpdatedAt        time.Time
	PreferencesID        uuid.NullUUID
	AvatarUrl            sql.NullString
	CoverUrl             sql.NullString
	DarkMode             sql.NullBool
	PrivateMode          sql.NullBool
	PreferencesCreatedAt sql.NullTime
	PreferencesUpdatedAt sql.NullTime
	FollowingCount       int64
	FollowerCount        int64
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.PreferencesID,
		&i.AvatarUrl,
		&i.CoverUrl,
		&i.DarkMode,
		&i.PrivateMode,
		&i.PreferencesCreatedAt,
		&i.PreferencesUpdatedAt,
		&i.FollowingCount,
		&i.FollowerCount,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT 
    u.id as user_id,
    u.username,
    u.email,
    u.hashed_password,
    u.created_at as user_created_at,
    u.updated_at as user_updated_at,
    up.id as preferences_id,
    up.avatar_url,
    up.cover_url,
    up.dark_mode,
    up.private_mode,
    up.created_at as preferences_created_at,
    up.updated_at as preferences_updated_at,
    (
      SELECT COUNT(*)
      FROM follows f
      WHERE f.initiator_id = u.id
      and f.status = 'accepted'
    ) as following_count,
    (
      SELECT COUNT(*)
      FROM follows f
      WHERE f.target_id = u.id
      and f.status = 'accepted'
    ) as follower_count
FROM 
    users u
LEFT JOIN
    user_preferences up ON up.user_id = u.id
WHERE u.username = $1
`

type GetUserByUsernameRow struct {
	UserID               uuid.UUID
	Username             string
	Email                string
	HashedPassword       string
	UserCreatedAt        time.Time
	UserUpdatedAt        time.Time
	PreferencesID        uuid.NullUUID
	AvatarUrl            sql.NullString
	CoverUrl             sql.NullString
	DarkMode             sql.NullBool
	PrivateMode          sql.NullBool
	PreferencesCreatedAt sql.NullTime
	PreferencesUpdatedAt sql.NullTime
	FollowingCount       int64
	FollowerCount        int64
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.PreferencesID,
		&i.AvatarUrl,
		&i.CoverUrl,
		&i.DarkMode,
		&i.PrivateMode,
		&i.PreferencesCreatedAt,
		&i.PreferencesUpdatedAt,
		&i.FollowingCount,
		&i.FollowerCount,
	)
	return i, err
}

const resetUsersTable = `-- name: ResetUsersTable :exec
delete from users
`

func (q *Queries) ResetUsersTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsersTable)
	return err
}
