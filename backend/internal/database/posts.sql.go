// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, body, created_at, updated_at, user_id)
VALUES (gen_random_uuid(), $1, $2, $3, $4)
`

type CreatePostParams struct {
	Body      string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}

const getPosts = `-- name: GetPosts :many
SELECT 
    posts.id, posts.body, posts.created_at, posts.updated_at, posts.user_id, posts.is_deleted, posts.visibility,
    u.username AS username,
    up.avatar_url AS avatar_url
FROM posts
JOIN users u ON posts.user_id = u.id
LEFT JOIN user_preferences up ON up.user_id = u.id
ORDER BY posts.created_at DESC
`

type GetPostsRow struct {
	ID         uuid.UUID
	Body       string
	CreatedAt  time.Time
	UpdatedAt  time.Time
	UserID     uuid.UUID
	IsDeleted  bool
	Visibility string
	Username   string
	AvatarUrl  sql.NullString
}

func (q *Queries) GetPosts(ctx context.Context) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.IsDeleted,
			&i.Visibility,
			&i.Username,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUsername = `-- name: GetPostsByUsername :many
SELECT 
    posts.id, posts.body, posts.created_at, posts.updated_at, posts.user_id, posts.is_deleted, posts.visibility,
    u.username,
    up.avatar_url as user_avatar_url
FROM posts 
JOIN users u ON posts.user_id = u.id
LEFT JOIN user_preferences up ON up.user_id = u.id
WHERE u.username = $1
ORDER BY posts.created_at DESC
`

type GetPostsByUsernameRow struct {
	ID            uuid.UUID
	Body          string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	UserID        uuid.UUID
	IsDeleted     bool
	Visibility    string
	Username      string
	UserAvatarUrl sql.NullString
}

func (q *Queries) GetPostsByUsername(ctx context.Context, username string) ([]GetPostsByUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUsernameRow
	for rows.Next() {
		var i GetPostsByUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.IsDeleted,
			&i.Visibility,
			&i.Username,
			&i.UserAvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetPostsTable = `-- name: ResetPostsTable :exec
DELETE FROM posts
`

func (q *Queries) ResetPostsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPostsTable)
	return err
}
