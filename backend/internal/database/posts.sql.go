// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, body, created_at, updated_at, user_id, username)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5)
RETURNING id, body, created_at, updated_at, user_id, username
`

type CreatePostParams struct {
	Body      string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	Username  string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.Username,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Username,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, body, created_at, updated_at, user_id, username FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUsername = `-- name: GetPostsByUsername :many
SELECT posts.id, posts.body, posts.created_at, posts.updated_at, posts.user_id, posts.username,  users.avatar_url
FROM posts 
JOIN users ON posts.user_id = users.id
WHERE users.username = $1
`

type GetPostsByUsernameRow struct {
	ID        uuid.UUID
	Body      string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	Username  string
	AvatarUrl string
}

func (q *Queries) GetPostsByUsername(ctx context.Context, username string) ([]GetPostsByUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUsernameRow
	for rows.Next() {
		var i GetPostsByUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Username,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetPostsTable = `-- name: ResetPostsTable :exec
DELETE FROM posts
`

func (q *Queries) ResetPostsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPostsTable)
	return err
}
