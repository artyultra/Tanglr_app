// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const acceptFollowRequest = `-- name: AcceptFollowRequest :exec
UPDATE follows
SET status = 'accepted', updated_at = NOW()
WHERE initiator_id = $1
    AND target_id = $2
    AND status = 'pending'
`

type AcceptFollowRequestParams struct {
	InitiatorID uuid.UUID
	TargetID    uuid.UUID
}

func (q *Queries) AcceptFollowRequest(ctx context.Context, arg AcceptFollowRequestParams) error {
	_, err := q.db.ExecContext(ctx, acceptFollowRequest, arg.InitiatorID, arg.TargetID)
	return err
}

const getFollowerList = `-- name: GetFollowerList :many
SELECT
    f.initiator_id, f.target_id, f.status, f.created_at, f.updated_at,
    u.username as follower_username,
    up.avatar_url as follower_avatar_url
FROM
    follows f
JOIN
    users u ON f.initiator_id = u.id
LEFT JOIN
    user_preferences up ON up.user_id = u.id
WHERE
    f.status = 'accepted' AND f.target_id = $1
`

type GetFollowerListRow struct {
	InitiatorID       uuid.UUID
	TargetID          uuid.UUID
	Status            string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	FollowerUsername  string
	FollowerAvatarUrl sql.NullString
}

func (q *Queries) GetFollowerList(ctx context.Context, targetID uuid.UUID) ([]GetFollowerListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowerList, targetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowerListRow
	for rows.Next() {
		var i GetFollowerListRow
		if err := rows.Scan(
			&i.InitiatorID,
			&i.TargetID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FollowerUsername,
			&i.FollowerAvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingList = `-- name: GetFollowingList :many
SELECT
    f.initiator_id, f.target_id, f.status, f.created_at, f.updated_at,
    u.username as following_username,
    up.avatar_url as following_avatar_url
FROM
    follows f
JOIN
    users u ON f.target_id = u.id
LEFT JOIN
    user_preferences up ON up.user_id = u.id
WHERE
    f.status = 'accepted' AND f.initiator_id = $1
`

type GetFollowingListRow struct {
	InitiatorID        uuid.UUID
	TargetID           uuid.UUID
	Status             string
	CreatedAt          time.Time
	UpdatedAt          time.Time
	FollowingUsername  string
	FollowingAvatarUrl sql.NullString
}

func (q *Queries) GetFollowingList(ctx context.Context, initiatorID uuid.UUID) ([]GetFollowingListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingList, initiatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingListRow
	for rows.Next() {
		var i GetFollowingListRow
		if err := rows.Scan(
			&i.InitiatorID,
			&i.TargetID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FollowingUsername,
			&i.FollowingAvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const initiateFollowRequest = `-- name: InitiateFollowRequest :one
INSERT INTO follows (initiator_id, target_id, status)
VALUES ($1, $2, $3)
RETURNING initiator_id, target_id, status, created_at, updated_at
`

type InitiateFollowRequestParams struct {
	InitiatorID uuid.UUID
	TargetID    uuid.UUID
	Status      string
}

func (q *Queries) InitiateFollowRequest(ctx context.Context, arg InitiateFollowRequestParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, initiateFollowRequest, arg.InitiatorID, arg.TargetID, arg.Status)
	var i Follow
	err := row.Scan(
		&i.InitiatorID,
		&i.TargetID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const rejectFollowRequest = `-- name: RejectFollowRequest :exec
DELETE FROM follows
WHERE initiator_id = $1
    AND target_id = $2
    AND status = 'pending'
`

type RejectFollowRequestParams struct {
	InitiatorID uuid.UUID
	TargetID    uuid.UUID
}

func (q *Queries) RejectFollowRequest(ctx context.Context, arg RejectFollowRequestParams) error {
	_, err := q.db.ExecContext(ctx, rejectFollowRequest, arg.InitiatorID, arg.TargetID)
	return err
}

const resetFollowsTable = `-- name: ResetFollowsTable :exec
DELETE FROM follows
`

func (q *Queries) ResetFollowsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetFollowsTable)
	return err
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follows
WHERE initiator_id = $1 
    AND target_id = $2
    AND status = 'accepted'
`

type UnfollowUserParams struct {
	InitiatorID uuid.UUID
	TargetID    uuid.UUID
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.ExecContext(ctx, unfollowUser, arg.InitiatorID, arg.TargetID)
	return err
}
